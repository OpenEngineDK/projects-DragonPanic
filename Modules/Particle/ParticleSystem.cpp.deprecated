#include "ParticleSystem.h"

#include "ParticleSystemEvents.h"
#include "Particle.h"
#include "FireBall.h"

#include "../Boid/BoidsSystem.h"
#include "../Island/HeightMap.h"

#include <Display/IViewingVolume.h>
#include <Meta/OpenGL.h>
#include <Math/RandomGenerator.h>
#include <Renderers/IRenderingView.h>
#include <Resources/ResourceManager.h>
#include <Resources/ITexture2D.h>

#include <iostream>

using namespace OpenEngine::Resources;
using namespace std;

unsigned int textures[10];
int textureIndex;

ParticleSystem::ParticleSystem(HeightMap* heightMap, IViewingVolume* vv,
                               BoidsSystem* boidssystem,
                               Renderers::TextureLoader& textureLoader) 
    : textureLoader(textureLoader) {
    this->heightMap = heightMap;
    this->vv = vv;
    this->boidssystem = boidssystem;
    randObject = new RandomGenerator();
    textureIndex = 0;
}

ParticleSystem::~ParticleSystem(){
    delete randObject;
}

void ParticleSystem::Handle(InitializeEventArg arg) {
    ITexture2DPtr tex1 = 
        ResourceManager<ITexture2D>::Create("Smoke/smoke01.tga");
    textureLoader.Load(tex1);
    textures[ textureIndex ] = tex1->GetID();
    textureIndex++;

    ITexture2DPtr tex2 = 
      ResourceManager<ITexture2D>::Create("Smoke/smoke02.tga");
    textureLoader.Load(tex2);
    textures[ textureIndex ] = tex2->GetID();
    textureIndex++;

    ITexture2DPtr tex3 = 
      ResourceManager<ITexture2D>::Create("Smoke/smoke03.tga");
    textureLoader.Load(tex3);
    textures[ textureIndex ] = tex3->GetID();
    textureIndex++;
}

struct closerToCamera : public binary_function<Particle*, Particle*, bool> {
    bool operator()(Particle* x, Particle* y) {
      return x->IsCloserToCamera(y);
    }
};

void ParticleSystem::CreateParticles(double time, double prevTime, 
				     float particlesPerSecond,
                                     Vector<3,float> position, 
				     Vector<3,float> velocity, 
				     float velocityRandomness,
                                     double size, double lifeTime) {
    
    // Create particles in the world at arbritrary
    // points in time, independent on frame rate
    int startI = int(prevTime*particlesPerSecond);
    int endI   = int(time    *particlesPerSecond);
    for (int i=startI; i<endI; i++) {
        Vector<3,float> randomVector = Vector<3,float>(
                                                       randObject->UniformFloat(-0.5,0.5),
                                                       randObject->UniformFloat(-0.5,0.5),
                                                       randObject->UniformFloat(-0.5,0.5)
                                 );
        Vector<3,float> pos = position;
        if (endI-startI>1) pos = pos-velocity*2/2*(time-prevTime);
        Particle* p = new Particle(heightMap,vv,
                                   pos,
                                   velocity+(randomVector*velocityRandomness),
                                   size,
                                   lifeTime,
                                   randObject->UniformFloat(0,1)
                                   );
        // Update particles based on current time compared to birth time
        if (endI-startI>1)
	  p->update(time-(i/(particlesPerSecond*1.0)));

        tmpParticles.push_back(p);
    }
}

void ParticleSystem::Handle(ProcessEventArg arg) {
    unsigned int dt = arg.approx;
    float deltaTime = ((float)dt)/1000.0;
    float timeStep = deltaTime/1000.0;

    // Insert all new particles from tmpParticles list into particles list
    for (vector<Particle*>::iterator i=tmpParticles.begin(); i!=tmpParticles.end(); ++i) {
        particles.push_back(*i);
    }
    tmpParticles.clear();

    // Fire on boids
    for (vector<Particle*>::iterator i=particles.begin(); i!=particles.end(); ++i) {
        boidssystem->HandleFire((*i)->getPosition(),3.0);
    }

    // Gravity and slight randomness
    for (vector<Particle*>::iterator i=particles.begin(); i!=particles.end(); ++i) {
        (*i)->addExternalForce(Vector<3,float>(0,10,0));
        (*i)->addExternalForce(Vector<3,float>(randObject->UniformFloat(-0.5,0.5),
                                               randObject->UniformFloat(-0.5,0.5),
                                               randObject->UniformFloat(-10,10) ));
    }

    // Update all particles
    for (vector<Particle*>::iterator i=particles.begin(); i!=particles.end(); ++i) {
        (*i)->update(timeStep);
    }

    // Delete dead particles
    for (vector<Particle*>::iterator i=particles.begin(); i!=particles.end(); ++i) {
        if (!(*i)->isDead()) { 
			//particles.erase(i); --i; 
			tmpParticles.push_back(*i);
		} else
			delete *i;
    }
	particles.clear();
	particles.swap(tmpParticles);
	//tmpParticles.clear();


}

void ParticleSystem::CreateFireball(Vector<3,float> position, Vector<3,float> velocity, float size) {
    Vector<3,float> randomVector = Vector<3,float>(
                                                   randObject->UniformFloat(-0.5,0.5),
                                                   randObject->UniformFloat(-0.5,0.5),
                                                   randObject->UniformFloat(-0.5,0.5)
                             );
    FireBall* p = new FireBall( heightMap, vv, boidssystem, this, position, velocity, size, 2.0, randObject->UniformFloat(0,1) );
    particles.push_back(p);
}

IEvent<ParticleSystemEventArg>& ParticleSystem::ParticleSystemEvent() {
    return particleEvents;
}

void ParticleSystem::Apply(IRenderingView* rv) {
    // Sort particles for depth
    sort(particles.begin(),particles.end(),closerToCamera());

    // Draw particles
    GLboolean depthmask; //save state
    glGetBooleanv(GL_DEPTH_WRITEMASK, &depthmask);
    glDepthMask(GL_FALSE);

    GLboolean t = glIsEnabled(GL_TEXTURE_2D);
    glEnable(GL_TEXTURE_2D);

    for (vector<Particle*>::iterator i=particles.begin(); 
         i!=particles.end(); ++i) {
        (*i)->draw();
    }

    if (!t)
        glDisable(GL_TEXTURE_2D);
    glDepthMask(depthmask);
}
